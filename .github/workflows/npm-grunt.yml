name: ðŸš€ðŸš€ðŸš€ðŸš€ðŸš€ðŸš€ðŸš€ðŸš€ðŸš€ Deploy
on:
  push:
    branches:
      - master
      - dev
  pull_request: { }

permissions:
  actions: write
  id-token: write
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  merge-reports:
    permissions:
      pull-requests: write
      checks: write
    if: ${{ github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Install dependencies
        run: npm ci
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps
      - name: Run Playwright tests
        run: npx playwright test
      - name: upload reports
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 1
      - name: Hello PR and List Files
        uses: actions/github-script@v6
        if: always()
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            const username = context.payload.pull_request.user.login;
            const message = `Hello @${username}! ðŸ‘‹ Welcome to the PR. Your PR number is ${prNumber}.`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: message
            });
            
            const fileList = await github.rest.repos.getContent({
              owner: context.repo.owner,
              repo: context.repo.repo,
              path: '' // Empty string for root directory
            });
            
            if (fileList.data && Array.isArray(fileList.data)) {
              const fileNames = fileList.data.map(file => file.name).join('\n');
              const fileListMessage = `Here's a list of files in the repository:\n${fileNames}`;
            
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: fileListMessage
              });
            }
      - name: List directories after tests
        if: always()
        run: ls -la


