name: ðŸš€ðŸš€ðŸš€ðŸš€ðŸš€ðŸš€ðŸš€ðŸš€ðŸš€ Deploy
on:
  push:
    branches:
      - master
      - dev
  pull_request: { }
  # # # # # # # #
  # # # # # #  #
permissions:
  actions: write
  id-token: write
  contents: read
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  merge-reports:
    permissions:
      pull-requests: write
      checks: write
    # if: ${{ github.event.workflow_run.event == 'pull_request' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Install dependencies
        run: npm ci
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps
      - name: Run Playwright tests
        run: npx playwright test

      - name: Read pull request number
        if: always()
        uses: ./.github/actions/download-artifact
        with:
          namePrefix: 'pull-request'
          path: '.'

      - name: Comment on PR
        if: always()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GH_REPO }}
          script: |
            const fs = require('fs');
            let prNumber;
            if (context.payload.workflow_run.event === 'pull_request') {
              const prs = context.payload.workflow_run.pull_requests;
              if (prs.length) {
                prNumber = prs[0].number;
              } else {
                prNumber = parseInt(fs.readFileSync('pull_request_number.txt').toString());
                console.log('Read pull request number from file: ' + prNumber);
              }
            } else {
              core.error('Unsupported workflow trigger event: ' + context.payload.workflow_run.event);
              return;
            }
            if (!prNumber) {
              core.error('No pull request found for commit ' + context.sha + ' and workflow triggered by: ' + context.payload.workflow_run.event);
              return;
            }
            {
              // Mark previous comments as outdated by minimizing them.
              const { data: comments } = await github.rest.issues.listComments({
                ...context.repo,
                issue_number: prNumber,
              });
              for (const comment of comments) {
                if (comment.user.login === 'github-actions[bot]' && /\[Test results\]\(https:\/\/.+?\) for "${{ github.event.workflow_run.name }}"/.test(comment.body)) {
                  await github.graphql(`
                    mutation {
                      minimizeComment(input: {subjectId: "${comment.node_id}", classifier: OUTDATED}) {
                        clientMutationId
                      }
                    }
                  `);
                }
              }
            }
            const reportDir = 'run-${{ github.event.workflow_run.id }}-${{ github.event.workflow_run.run_attempt }}-${{ github.sha }}';
            const mergeWorkflowUrl = `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
            const reportMd = await fs.promises.readFile('report.md', 'utf8');
            function formatComment(lines) {
              let body = lines.join('\n');
              if (body.length > 65535)
                body = body.substring(0, 65000) + `... ${body.length - 65000} more characters`;
              return body;
            }
            const { data: response } = await github.rest.issues.createComment({
              ...context.repo,
              issue_number: prNumber,
              body: formatComment([
                `### [Test results]`,
                reportMd,
                '',
                `Merge [workflow run](${mergeWorkflowUrl}).`
              ]),
            });
            core.info('Posted comment: ' + response.html_url);
            const check = await github.rest.checks.create({
              ...context.repo,
              name: 'Merge report (${{ github.event.workflow_run.name }})',
              head_sha: '${{ github.event.workflow_run.head_sha }}',
              status: 'completed',
              conclusion: 'success',
              output: {
                title: 'Test results for "${{ github.event.workflow_run.name }}"',
                summary: [
                  reportMd,
                  '',
                  '---',
                  `Merge [workflow run](${mergeWorkflowUrl}).`
                ].join('\n'),
              }
